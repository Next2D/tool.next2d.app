(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))s(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const i of t.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&s(i)}).observe(document,{childList:!0,subtree:!0});function n(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function s(e){if(e.ep)return;e.ep=!0;const t=n(e);fetch(e.href,t)}})();const d=()=>new Promise(o=>{o()}),c=[d],l=()=>{const o=[];for(let r=0;r<c.length;++r){const n=c[r];o.push(n())}return Promise.all(o)},u=()=>{console.log("run")};if(document.readyState==="loading"){const o=r=>{r.target&&(r.target.removeEventListener("DOMContentLoaded",o),l().then(u))};window.addEventListener("DOMContentLoaded",o)}else l().then(u);
